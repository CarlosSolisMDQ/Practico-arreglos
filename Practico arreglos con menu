#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <memory.h>
#include "pila.h"

void llenar_arreglo(int arr[], int size);
int suma(int arr[], int size);
void carga_pila(int arr[], int size, Pila *pila);
void carga_100_numeros_reales(int arr[], int size, int inicio);
int suma_reales(int arr[], int size);
void carga_caracteres(char c[], int size);
void mostrar_arreglo_letras(char arr[], int size);
void buscar_caracter(char arr[], int size, char item);
void insertar_caracter(char arr[], int size, char item);
char buscar_caracter_mayor(char arr[], int size);
void verificar_si_es_capicua(int arr[], int size);
void invertir_arreglo(int arr[],int size);
void ordenamiento_por_seleccion(int arr[], int size);
void ordenamiento_por_insercion(int arr[], int size);
void intercalar_dos_arreglos(char arr1[], char arr2[], int size1, int size2);

int main()
{
    char opcion, seguir;
    int size = 0;
    int inicio = 0;
    Pila pila;
    inicpila(&pila);
    int B[size];
    char c[size];
    char item;

    char mayor = '*';
    int size1 = 0;
    int size2 = 0;
    //char arr1[size1];
    //char arr2[size2];
    int ejercicio = 0;
    char control;

    char arr1[6] = "acgulx";
    char arr2[4] = "pnzb";


    do
    {
        system("cls");

        printf("||   1)   Cargar un arreglo por teclado, informar la cantidad de elem.\t||\n");
        printf("||        y mostrar arreglo por pantalla                          \t||\n");
        printf("||                                                                \t||\n");
        printf("||   2)   suma de elementos de un arreglo                         \t||\n");
        printf("||        suma de sus elementos.                                  \t||\n");
        printf("||   3)   copiar los datos de un arreglo en una pila              \t||\n");
        printf("||                                                                \t||\n");
        printf("||   4)   Funcion que sume elementos reales de un arreglo         \t||\n");
        printf("||        de dimension variable                                   \t||\n");
        printf("||   5)   Encontrar un elemento en un arreglo de caracteres       \t||\n");
        printf("||   6)   Insertar un caracter en un arreglo ordenado             \t||\n");
        printf("||        alfabeticamente conservando el orden                    \t||\n");
        printf("||   7)   Obtiene el maximo caracter de un arreglo                \t||\n");
        printf("||   8)   Determinar si un arreglo es palindromo                  \t||\n");
        printf("||   9)   Invierte los elementos de un arreglo                    \t||\n");
        printf("||   10)  Ordena un arreglo por seleccion                         \t||\n");
        printf("||   11)  Ordena un arreglo por inserciocn                        \t||\n");
        printf("||   12)  Ordena dos arreglos de caracteres concatenados          \t||\n");




        printf("Que ejercicio quieres ejecutar?\n");

        scanf("%i", &ejercicio);
        system("cls");



        switch (ejercicio){

        case 1:


                printf("Ingrese el tamaño del arreglo: ");
                scanf("\n%i", &size);


                llenar_arreglo(B, size);


                for (int i = 0; i < size; i++) {
                    printf("\n%d", B[i]);
                }

                printf("\nEl tamaño del arreglo es: %i", size);

            break;

        case 2:


            printf("Ingrese el tamaño del arreglo: ");
            scanf("\n%i", &size);


            llenar_arreglo(B, size);

            int result = suma(B, size);

            printf("\n La sumatoria es: %i", result);


            break;

        case 3:



            printf("Ingrese el tamaño del arreglo: ");
            scanf("\n%i", &size);


            llenar_arreglo(B, size);

            carga_pila(B, size, &pila);


            mostrar(&pila);

            break;

        case 4:



            printf("Ingrese el tamaño del arreglo: ");
            scanf("\n%i", &size);

            printf("\ningrese el numero inicial del arreglo: ");
            scanf("%d", &inicio);



            carga_100_numeros(B, size, inicio);

            int result2 = suma_reales(B, size);

            for (int i = 0 ; i < size; i++){
                printf("\n   %d", B[i]);
            }


            printf("\n La sumatoria es: %i\n\n", result2);



            break;

        case 5:





            printf("Ingrese el tamaño del arreglo: ");
            scanf("\n%i", &size);


            carga_caracteres(c, size);

            printf("\ningrese la letra a buscar: ");
            fflush(stdin);
            scanf("%c", &item);

            buscar_caracter(c, size, item);



            break;

        case 6:




            printf("Ingrese el tamaño del arreglo: ");
            scanf("\n%i", &size);


            carga_caracteres(c, size);

            mostrar_arreglo_letras(c, size);

            printf("\ningrese la letra a insertar: ");
            fflush(stdin);
            scanf("%c", &item);

            insertar_caracter(c, size, item);

            mostrar_arreglo_letras(c, size+1);



            break;

        case 7:





            printf("Ingrese el tamaño del arreglo: ");
            scanf("\n%i", &size);



            carga_caracteres(c, size);
            mostrar_arreglo_letras(c, size);
            mayor = buscar_caracter_mayor(c, size);

            printf("\n\nel caracter mayor es: %c\n", mayor);

            break;

        case 8:



                printf("Ingrese el tamaño del arreglo: ");
                scanf("\n%i", &size);


                llenar_arreglo(B, size);

                verificar_si_es_capicua(B, size);



                break;


        case 9:




            printf("Ingrese el tamaño del arreglo: ");

            scanf("\n%i", &size);



            llenar_arreglo(B, size);

            invertir_arreglo(B, size);


            break;

        case 10:

            printf("Ingrese el tamaño del arreglo: ");
            scanf("\n%i", &size);

            llenar_arreglo(B, size);

            ordenamiento_por_seleccion(B, size);


            break;

        case 11:

            printf("Ingrese el tamaño del arreglo: ");
            scanf("\n%i", &size);

            llenar_arreglo(B, size);

            ordenamiento_por_insercion(B, size);



            break;

        case 12:

            printf("primer arreglo:\n");
            mostrar_arreglo_letras(arr1, 6);
            printf("\n");
            printf("segundo arreglo:\n");
            mostrar_arreglo_letras(arr2, 4);
            printf("\n");


            intercalar_dos_arreglos(arr1, arr2, 6, 4);



            break;



                default:

                            printf("Ese ejercicio no existe \n");

        }

        printf("\n\nQuiere ver otro ejercicio? s/n\n");
        fflush(stdin);
        printf("%c\n", control = getch());

    }
    while(control == 's');

    return 0;


}


void llenar_arreglo(int arr[], int size){
    int valor;
    for(int j = 0; j < size; j++ ){
        printf("\ningrese un valor:");
        scanf("%i", &valor);
        arr[j] = valor;
    }

}

int suma(int arr[], int size){
    int suma = 0;
    for (int i = 0 ; i < size; i++) {
        suma += arr[i];
    }
    return suma;
}

void carga_pila(int arr[], int size, Pila *pila){

    for(int i = 0; i< size; i++){
        apilar(pila, arr[i]);
    }


}

void carga_100_numeros(int arr[], int size, int inicio){
    for (int i = 0 ; i < size; i++){
        arr[i] = inicio + i;
    }
}

int suma_reales(int arr[], int size){
    int temp = 0;
    for (int i = 0; i < size; i++){
        temp = temp + arr[i];
    }
    return temp;
}

void carga_caracteres(char c[], int size){
    for(int p = 0 ; p < size; p++){
        fflush(stdin);
        printf("ingrese una letra: ");
        scanf("%c", &c[p]);
    }

}

void mostrar_arreglo_letras(char arr[], int size){
    for (int i = 0; i < size; i++){
        printf("%c", arr[i]);
    }


}

void buscar_caracter(char arr[], int size, char item){
    int i = 0;
    int aux = 1;
    for (i = 0; i< size; i++){
        if (arr[i] == item) {
            printf("\nel elemento esta en el arreglo");
            aux = 0;
        }
    }
    if (aux != 0){
        printf("\nel elemento no esta en el arreglo");
    }
}

void insertar_caracter(char arr[], int size, char item){
    //esto fue un quilombo.

    int a, b;
    a = 0;
    b = 0;
    int size2 = size + 1;
    char aux[size2];
    //con el while busco el hueco como con pilas.

    while (arr[a] < item) {
        aux[a] = arr[a];
        a++;
        b++;
    }

    //con los for paso los items que quedan saltando 1 elemento y los retorno al array original.

    aux[a] = item;
    for (int i = a; i< size; i++){
        aux[i+1]= arr[i];
    }


    for(int j = 0; j <= size2; j++){
        arr[j] = aux[j];
    }


}

char buscar_caracter_mayor(char arr[], int size){

    char mayor;
    int i = size-1;
    char arr2[size];
    mayor = arr[0];

    for(int j = 0; j < size; j++){
        if (mayor > arr[j]){
            arr2[j] = arr[j];
        } else {
            arr2[j] = mayor;
            mayor = arr[j];
        }
    }
    return mayor;

}

void verificar_si_es_capicua(int arr[], int size){
    int length = size/2;
    int a = 0;
    int b = size - 1;
    int counter = length;
    for (int i = 0; i< length; i++){
         int d = a + i;
         int e = b - i;

         if (arr[d] == arr[e]){
                counter--;
         }
    }
    if (counter == 0){
        printf("\nEs capicua\n\n");
    } else {
        printf("\nNo es capicua\n\n");
    }

}

void invertir_arreglo(int arr[],int size) {
    int aux[size];
    int length = size -1;

    for (int i = 0 ; i < size; i++){
        aux[i] = arr[length - i];
        //printf("%i", aux[i]);
        //printf("%i", arr[i]);
    }
    for (int i = 0 ; i < size; i++){
         arr[i] = aux[i];
        //printf("%i", aux[i]);
        printf("%i", arr[i]);
    }
}

void ordenamiento_por_seleccion(int arr[], int size){
    int temp = 0;
    int temp2 = 0;
    for (int i = 0; i < size; i++){
        for (int j = i + 1; j < size; j++){
            if (arr[i] > arr[j]){
                temp = arr[i];
                temp2 = arr[j];
                arr[j] = temp;
                arr[i] = temp2;
            }
        }
    }
    for (int k = 0; k < size; k++){
        printf("%i", arr[k]);
    }

}

void ordenamiento_por_insercion(int arr[], int size){
     int i, a ,index;
          for (i = 0; i < size; i++) {
            index = arr[i];
            a = i-1;
            while (a >= 0 && arr[a] > index) {
              arr[a + 1] = arr[a];
              a--;
            }
            arr[a+1] = index;
          }
    for (int k = 0; k < size; k++){
        printf("%i", arr[k]);
    }

}

void intercalar_dos_arreglos(char arr1[], char arr2[], int size1, int size2){
    int length = size1+size2;
    char *con = malloc(size1+size2);
    // copiar y concatenar reservando memoria con malloc.
    memcpy(con, arr1, size1);
    memcpy(con+size1, arr2, size2);

    //printf("%s", con);

    char temp = 0;
    char temp2 = 0;
    for (int i = 0; i < length; i++){
        for (int j = i + 1; j < length; j++){
            if (con[i] > con[j]){
                temp = con[i];
                temp2 = con[j];
                con[j] = temp;
                con[i] = temp2;
            }
        }
    }
    for (int k = 0; k < length; k++){
        printf("%c", con[k]);
    }



}
